[
    {
        "id": 1,
        "name": "Crowdcube-Fund for Needy",
        "technologyStack": [
            "mongodb",
            "reactjs",
            "firebase-auth",
            "express-js",
            "reactrouter",
            "tailwindcss",
            "swiper-js",
            "daisyui"
        ],
        "description": "Crowdcube is a crowdfunding platform that allows users to create, explore, and contribute to campaigns. It helps people raise funds for personal needs, startups, businesses, and creative ideas. Users can add campaigns, donate to campaigns, and manage their own contributions.",
        "LiveLink": "https://muktadir-alam.web.app/",
        "repositoryLink": "https://github.com/MUKTADIR-ALAM/b10-a10-client-side",

        "Challenges": "Developing Crowdcube came with several challenges, starting with implementing secure authentication and authorization using Firebase Authentication. Managing different user roles, such as campaign creators, donors, and admins, required careful access control. Structuring the MongoDB database efficiently was another hurdle, ensuring campaigns, user contributions, and transaction records were optimized for fast retrieval and scalability.",
        "improvements": "Crowdcube can be enhanced by using Redux or Zustand for better state management and WebSockets for smoother real-time updates. The UI/UX can be improved with more interactive elements, better accessibility, and optimized responsiveness. Adding multiple payment gateways like Stripe and PayPal would offer users more flexibility. Security can be strengthened with stricter input validation, fraud detection, and multi-factor authentication. Improved search and filtering would enhance user experience, and optimizing backend deployment with load balancing would ensure better scalability as traffic grows.",
        "img":"https://i.ibb.co.com/KzKkXnsf/Screenshot-2025-02-07-133857.png"
    },
    {
        "id": 2,
        "name": "Runner-Marathon Management",
        "technologyStack": [
            "mongodb",
            "reactjs",
            "firebase-auth",
            "express-js",
            "reactrouter",
            "tailwindcss",
            "swiper-js",
            "daisyui"
        ],
        "description": "This Marathon based web applicaton is build for marathon enthusiast based on bangladesh. After registration Marathon organizer can build marathon campgain. The marathon enthusiast can fill up the form for the specific marathon program and register for the marathon. This website will connect the marathon organizer and the marathon enthusiast",
        "LiveLink": "https://kicksy0101.web.app/",
        "repositoryLink": "https://github.com/MUKTADIR-ALAM/b10a11-client-side",

        "Challenges": "While building the Marathon Management System, I encountered several challenges. Implementing a fully responsive design across different devices was tricky, especially for the dashboard layout. Managing private routes was another hurdle, as ensuring users remained logged in after refreshing required proper JWT authentication and token storage. Setting up server-side search using MongoDB’s $regex for case-insensitive filtering also added complexity. Additionally, integrating the countdown timer with react-countdown-circle-timer required precise state management. Lastly, implementing sorting using MongoDB’s sort() method while maintaining performance was a challenge.",

        "improvements": "After encountering some challenges, I made several key improvements to enhance the user experience and application performance. For better responsiveness, I fine-tuned the layout with advanced CSS techniques to ensure the dashboard and other pages adapt seamlessly across devices. I also optimized the JWT token handling by adding refresh token functionality, allowing users to remain logged in even after token expiration. To improve search performance, I integrated more efficient MongoDB queries, reducing load times and handling larger datasets seamlessly. I also added pagination to the marathon listings, making it easier for users to browse events. For the countdown timer, I included dynamic styling to make it visually engaging, and I implemented server-side sorting, making the marathons page more user-friendly. Additionally, I added a dark/light theme toggle, improving accessibility and user customization.",
        "img":"https://i.ibb.co.com/RTmYTpVG/Screenshot-2025-02-07-161428.png"
    },
    {
        "id": 3,
        "name": "PairUp-Matrimony Platform",
        "technologyStack": [
            "mongodb",
            "reactjs",
            "firebase-auth",
            "express-js",
            "reactrouter",
            "tailwindcss",
            "swiper-js",
            "daisyui"
        ],
        "description": "PairUp a digital Matrimony web application for marrige seekers. People can come to this website after a successfull register user can pusblish their biodata. then the biodata will be public and any marrige seekers can chose the biodata also proceed the process of marrige. this website help people to find their solemate",

        "LiveLink": "https://warmify-4879b.web.app/",
        "repositoryLink": "https://github.com/MUKTADIR-ALAM/b10a12-client-side",

        "Challenges": "While building the PairUp matrimony platform, I faced several challenges. Making the homepage and dashboard fully responsive for all devices required careful CSS handling without using DaisyUI. Ensuring private routes worked correctly after a page reload was tricky, requiring proper authentication management. Implementing TanStack Query for optimized data fetching and handling CRUD notifications without default browser alerts added complexity. Managing user roles dynamically, including making users admins and premium members, needed secure backend logic. Finally, handling payment processing and contact request approvals while maintaining data security was a major challenge.",

        "improvements": "The Matrimony application PairUP can be improved by enhancing UI/UX with a modern design using Material UI or Ant Design. Filtering and sorting options should be expanded for better matchmaking. A notification system for biodata updates and admin approvals can enhance user engagement. Implementing a chat feature for premium members would improve communication. Backend optimizations like server-side pagination and caching will boost performance. Lastly, adding analytics and AI-based matchmaking will enhance user experience and matchmaking accuracy.",
        "img":"https://i.ibb.co.com/4npRBm66/Screenshot-2025-02-07-162202.png"
    }
]
